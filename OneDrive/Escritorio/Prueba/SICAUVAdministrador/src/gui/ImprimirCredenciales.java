/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import Iniciador.RMI;
import Interfaces.ICarrera;
import Interfaces.IEstudiante;
import Interfaces.IFacultad;
import Interfaces.ITramite;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/**
 *
 * @author adria
 */
public class ImprimirCredenciales extends javax.swing.JFrame {

    public JTable imprimirTable2;
    public String ACEPTAR_DATOS = "Aceptada";
    public String CREDENCIAL_IMPRESA = "Credencial impresa";

    /**
     * Creates new form SecretariasRegistradas
     */
    public ImprimirCredenciales() {
        initComponents();
        refrescarTabla();
        setIconImage(new ImageIcon(getClass().getResource("/media/logo.png")).getImage());
        this.setLocationRelativeTo(null);
        imprimirTable.getTableHeader().setFont(new Font("Montserrat", Font.BOLD, 12));
        imprimirTable.getTableHeader().setOpaque(false);
        imprimirTable.getTableHeader().setOpaque(false);
        imprimirTable.getTableHeader().setForeground(new Color(47, 72, 90));
        imprimirTable.setRowHeight(25);//scroll
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        homeButton = new javax.swing.JButton();
        imprimirButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        imprimirTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        homeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/home.png"))); // NOI18N
        homeButton.setBorder(null);
        homeButton.setContentAreaFilled(false);
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });
        getContentPane().add(homeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 80, 80));

        imprimirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/excel.png"))); // NOI18N
        imprimirButton.setBorder(null);
        imprimirButton.setContentAreaFilled(false);
        imprimirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imprimirButtonActionPerformed(evt);
            }
        });
        getContentPane().add(imprimirButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 610, 340, -1));

        imprimirTable.setAutoCreateRowSorter(true);
        imprimirTable.setBackground(new java.awt.Color(255, 255, 250));
        imprimirTable.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        imprimirTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id Impresión", "Matrícula", "Nombre", "Facultad", "Programa educativo", "Foto", "Firma"
            }
        ));
        jScrollPane1.setViewportView(imprimirTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 1270, 450));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/Imprimir credencial – 1.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1360, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void exportarExcel(JTable t) throws IOException {
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos de excel", "xls");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Guardar archivo");
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String ruta = chooser.getSelectedFile().toString().concat(".xls");
            try {
                File archivoXLS = new File(ruta);
                if (archivoXLS.exists()) {
                    archivoXLS.delete();
                }
                archivoXLS.createNewFile();
                Workbook libro = new HSSFWorkbook();
                FileOutputStream archivo = new FileOutputStream(archivoXLS);
                Sheet hoja = libro.createSheet("Mi hoja de trabajo 1");
                hoja.setDisplayGridlines(false);
                for (int f = 0; f < t.getRowCount(); f++) {
                    Row fila = hoja.createRow(f);
                    for (int c = 0; c < t.getColumnCount(); c++) {
                        Cell celda = fila.createCell(c);
                        if (f == 0) {
                            celda.setCellValue(t.getColumnName(c));
                        }
                    }
                }
                int filaInicio = 1;
                for (int f = 0; f < t.getRowCount(); f++) {
                    Row fila = hoja.createRow(filaInicio);
                    filaInicio++;
                    for (int c = 0; c < t.getColumnCount(); c++) {
                        Cell celda = fila.createCell(c);
                        if (t.getValueAt(f, c) instanceof Double) {
                            celda.setCellValue(Double.parseDouble(t.getValueAt(f, c).toString()));
                        } else if (t.getValueAt(f, c) instanceof Float) {
                            celda.setCellValue(Float.parseFloat((String) t.getValueAt(f, c)));
                        } else {
                            celda.setCellValue(String.valueOf(t.getValueAt(f, c)));
                        }
                    }
                }
                libro.write(archivo);
                archivo.close();
                Desktop.getDesktop().open(archivoXLS);
            } catch (IOException | NumberFormatException e) {
                throw e;
            }
        }
    }

    public void refrescarTabla() {
        try {
            Vector<Vector> datos = new Vector<>();
            List<ITramite> listaTramite = RMI.getITramiteController().list();
            List<IEstudiante> listaEstudiantes = RMI.getIEstudianteController().list();
            List<IFacultad> listaFacultades = RMI.getIFacultadController().list();
            List<ICarrera> listaCarreras = RMI.getICarreraController().list();

            for (IEstudiante estudiante : listaEstudiantes) {
                Vector registro = new Vector();
                for (ITramite tramite : listaTramite) {
                    if (tramite.getMatricula().equals(estudiante.getMatricula()) && tramite.getEstado().equals(ACEPTAR_DATOS)) {
                        registro.add(estudiante.getMatricula());
                        registro.add(estudiante.getNombres() + " " + estudiante.getApellidoPaterno() + " " + estudiante.getApellidoMaterno());
                        for (IFacultad facultad : listaFacultades) {
                            if (estudiante.getIdFacultad() == facultad.getId()) {
                                registro.add(facultad.getFacultad());
                            }
                        }
                        for (ICarrera carrera : listaCarreras) {
                            if (estudiante.getIdCarrera() == carrera.getIdCarrera()) {
                                registro.add(carrera.getNombreCarrera());
                            }
                        }
                        datos.add(registro);
                    }
                }
            }

            Vector<String> columnas = new Vector<>();
            columnas.add("Matrícula");
            columnas.add("Nombre");
            columnas.add("Facultad");
            columnas.add("Carrera");

            imprimirTable.setModel(new DefaultTableModel(datos, columnas));
            imprimirTable2 = imprimirTable;
        } catch (RemoteException ex) {
            Logger.getLogger(ImprimirCredenciales.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        MenuAdministrador MenuAdmin = new MenuAdministrador();
        this.setVisible(false);
        MenuAdmin.setVisible(true);
    }//GEN-LAST:event_homeButtonActionPerformed

    private void imprimirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imprimirButtonActionPerformed
        try {
            try {
                exportarExcel(imprimirTable2);

            } catch (IOException ex) {
                Logger.getLogger(ImprimirCredenciales.class.getName()).log(Level.SEVERE, null, ex);
            }
            List<ITramite> listaTramite = RMI.getITramiteController().list();
            for (int i = 0; i < imprimirTable.getRowCount(); i++) {
                for (ITramite tramite : listaTramite) {
                    if (tramite.getMatricula().equals(imprimirTable.getValueAt(i, 0))) {
                        tramite.setEstado(CREDENCIAL_IMPRESA);
                        int respuesta = RMI.getITramiteController().update(tramite, tramite.getFolio());
                    }
                }

            }
            this.setVisible(false);
            MenuAdministrador MenuAdmin = new MenuAdministrador();
            MenuAdmin.setVisible(true);
        } catch (RemoteException ex) {
            Logger.getLogger(ImprimirCredenciales.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_imprimirButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImprimirCredenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImprimirCredenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImprimirCredenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImprimirCredenciales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImprimirCredenciales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton homeButton;
    private javax.swing.JButton imprimirButton;
    private javax.swing.JTable imprimirTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
